import React, { createContext, useContext, useEffect, useState } from 'react';
import 'react-native-gesture-handler';

import Login from './Screens/Login';
import Register from './Screens/Register';
import Home_Fireauth from './Screens/Home_Fireauth';
import Home_Resident from './Screens/Home_Resident';
import Chat from './Screens/Chat';
import Chat_Fireauth from './Screens/Chat_Fireauth';
import FireReports from './Screens/Reports';


import { getFirestore, collection, query, orderBy, onSnapshot, addDoc, doc, getDoc } from "firebase/firestore";
import { onAuthStateChanged } from 'firebase/auth';
import { ActivityIndicator, View } from 'react-native';
import { auth } from './Firebase/firebase'

import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';





const Stack = createStackNavigator();
const AuthenticatedUserContext = createContext({});

const AuthenticatedUserProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [role, setRole] = useState(null);

  useEffect(() => {
    if (user) {
      const db = getFirestore();
      // Replace 'roles' with the path to the user roles in your Firebase database
      const userRoleRef = doc(db, 'users', user.uid, role);
      const unsubscribe = onSnapshot(userRoleRef, (doc) => {
        setRole(doc.data().role);
      });

      return () => unsubscribe();
    }
  }, [user]);

  return(
    <AuthenticatedUserContext.Provider value={{user, setUser}}>
      {children}
    </AuthenticatedUserContext.Provider>
  )
}

function ChatStack (){
  return(

    <Stack.Navigator defaultScreenOptions={Home_Resident}>
      <Stack.Screen name="Home_Resident" component={Home_Resident} options={{ headerShown: false }} />
      <Stack.Screen name="Chat" component={Chat} options={{ title: 'Firey' }} />
      <Stack.Screen name="Home_Fireauth" component={Home_Fireauth} options={{ headerShown: false }} />
      <Stack.Screen name="Chat_Fireauth" component={Chat_Fireauth} options={{ title: 'Firey' }} />
      <Stack.Screen name="FireReports" component={FireReports} options={{ title: 'Fire Incident Reports' }} />
    </Stack.Navigator>

  )
}

function AuthStack() {
  return (
    <Stack.Navigator defaultScreenOptions={Login}>
      <Stack.Screen name="Login" component={Login} options={{ headerShown: false }} />
      <Stack.Screen name="Register" component={Register} options={{ headerShown: false }} />
    </Stack.Navigator>
  )
}

function RootNavigator(){
  const { user, setUser } = useContext(AuthenticatedUserContext);
  const [isLoading, setLoading] = useState(true);
  useEffect(()=> {
    const unsubscribe = onAuthStateChanged(auth,
      async authenticatedUser =>{
        authenticatedUser ? setUser(authenticatedUser) : setUser(null);
        setLoading(false);
      }
    )
    return () => unsubscribe();
  }, [user]);

  if(isLoading){
    return(
      <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
        <ActivityIndicator size="large"/>
      </View>
    )
  }

  return(
    <NavigationContainer>
      { user ? <ChatStack/> : <AuthStack/> }
    </NavigationContainer>
  )
}


export default function App(){
  const { user, role } = useContext(AuthenticatedUserContext);
  return(
    <NavigationContainer>
      {user ? (role === 'admin' ? <AdminStack /> : <ChatStack />) : <AuthStack />}
    </NavigationContainer>
  )
}




