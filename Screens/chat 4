// chat.js
import React, {
    useState,
    useEffect,
    useLayoutEffect,
    useCallback
} from 'react';
import colors from '../colors';
import { AntDesign } from '@expo/vector-icons';
import { useNavigation } from '@react-navigation/native';
import { TouchableOpacity, Text, View } from 'react-native';
import { GiftedChat } from "react-native-gifted-chat";
import { getAuth } from "firebase/auth";
import { getFirestore, collection, query, orderBy, onSnapshot, addDoc, doc } from "firebase/firestore";
import { app } from '../Firebase/firebase';


export default function Chat() {
    const navigation = useNavigation();
    const [messages, setMessages] = useState([]);
    const [conversationStep, setConversationStep] = useState(0);
    const [summary, setSummary] = useState({
        fireInitiationDetails: '',
        locationDetails: '',
        fireCauseDetails: '',
        fireSizeDetails: '',
        otherDetails: '',
    });


    useEffect(() => {
        // Initiate the chat when the component mounts
        handleFireInitiation();
    }, []);  

        // Handle input for other conversation steps
        const handleStep = (text) => {
            switch (conversationStep) {
                case 0:
                    //I'm sorry, I didn't understand that. Please type 'Fire' to initiate the process or 'Exit' to terminate.
                    handleDefaultResponse();
                    setConversationStep(1);
                    break;
                case 1:
                    //Hello! I'm here to help. I'm sorry to hear about the emergency. Your safety is our top priority. Please provide details about the location.
                    handleGreeting(text);
                    setSummary((prevSummary) => ({ ...prevSummary, locationDetails: text }));
                    setConversationStep(2);
                    break;
                case 2:
                    //Thank you! That is noted. Can you provide any additional details, such as how the fire started?
                    handleLocationDetails(text);
                    setSummary((prevSummary) => ({ ...prevSummary, locationDetails: text }));
                    setConversationStep(3);
                    break;
                case 3:
                    //Understood. How about the size of the fire?
                    handleFireCauseDetails(text);
                    setSummary((prevSummary) => ({ ...prevSummary, fireCauseDetails: text }));
                    setConversationStep(4);
                    break;
                case 4:
                    //I've relayed that information to the fire department. \n\nIn the meantime, please make sure to evacuate the building calmly and follow any safety procedures. \n\nIs there anyone with mobility issues or special needs that the emergency services should be aware of?
                    handleFireSizeDetails(text);
                    setSummary((prevSummary) => ({ ...prevSummary, fireSizeDetails: text }));
                    setConversationStep(5);
                    break;
                case 5:
                    //The fire departments are now informed. They will do their best to reach the location as quickly as possible. \n\nPlease let them know anything else they might need to be aware of when they arrive. \n\nKeep safe and take care!
                    handleLastResponse(text);
                    handleSummary(text);
                    // Optionally, setConversationStep(6) if needed
                    break;
                default:
                    handleDefaultResponse();
            }
        };

    const handleInput = (text) => {
        const inputText = text.trim().toLowerCase();
        // Check for initial input
        if (conversationStep === 0) {
            if (inputText === 'fire') {
                console.log("fire")
                setConversationStep(2);
                console.log(conversationStep)
                handleGreeting();
            } else if (inputText === 'exit') {
                handleBye();
                navigation.navigate('Home_Resident');
            } else {
                //handleDefaultResponse();
                setConversationStep(0);
                handleStep(conversationStep);
                console.log(conversationStep)
                console.log("you are here hehehe")
            }
        } else {
            // Handle input for other conversation steps
            if(inputText !== 'fire' || inputText !== 'exit'){
                //setConversationStep(0);
                handleDefaultResponse();
                console.log(conversationStep)
                console.log("you are here")
            }
        
        }


        
    };


    const handleBye = () =>{
        const defaultMessage = createBotMessage("Thank you for using Firey. Hoping you are always safe!");
        setMessages((prevMessages) => GiftedChat.append(prevMessages, defaultMessage));
    }

    const handleFireInitiation = (inputText) => {
        const initialMessage = createBotMessage("Hi! this is Firey speaking. Simply type 'Fire' to initiate the process and 'Exit' to terminate the process.");
        setMessages((prevMessages) => GiftedChat.append(prevMessages, initialMessage));
        setConversationStep(1);
    };

    const handleGreeting = () => {
        const message = createBotMessage(`Hello! I'm here to help. I'm sorry to hear about the emergency. Your safety is our top priority. Please provide details about the location.`);
        setMessages((prevMessages) => GiftedChat.append(prevMessages, message));
        //setSummary((prevSummary) => ({ ...prevSummary, locationDetails: text }));
    };




    const handleLocationDetails = (text) => {
        const message = createBotMessage(`Thank you! That is noted. Can you provide any additional details, such as how the fire started?`);
        setMessages((prevMessages) => GiftedChat.append(prevMessages, message));
        //setSummary((prevSummary) => ({ ...prevSummary, fireCauseDetails: text }));
        //setConversationStep(3);
        
    };

    const handleFireCauseDetails = (text) => {
        const message = createBotMessage(`Understood. How about the size of the fire?`);
        setMessages((prevMessages) => GiftedChat.append(prevMessages, message));
        //setSummary((prevSummary) => ({ ...prevSummary, fireSizeDetails: text }));
        //setConversationStep(4);
        
    };

    const handleFireSizeDetails = (text) => {
        const message = createBotMessage(`I've relayed that information to the fire department. \n\nIn the meantime, please make sure to evacuate the building calmly and follow any safety procedures. \n\nIs there anyone with mobility issues or special needs that the emergency services should be aware of?`);
        setMessages((prevMessages) => GiftedChat.append(prevMessages, message));
        //setSummary((prevSummary) => ({ ...prevSummary, otherDetails: text }));
        //setConversationStep(5);
    };

    const handleLastResponse = (text) => {
        // Handle other responses or provide a default message
        const defaultMessage = createBotMessage("The fire departments are now informed. They will do their best to reach the location as quickly as possible. \n\nPlease let them know anything else they might need to be aware of when they arrive. \n\nKeep safe and take care!");
        setMessages((prevMessages) => GiftedChat.append(prevMessages, defaultMessage));
        //setSummary((prevSummary) => ({ ...prevSummary, otherDetails: text }));
        //setConversationStep(6);
    };

    const handleSummary = () => {
        const defaultMessage = createBotMessage(`This is your summarized fire report:
        Initiation Details: ${summary.fireInitiationDetails} 
        Location Details: ${summary.locationDetails}
        Fire Cause Details: ${summary.fireCauseDetails}
        Fire Size Details: ${summary.fireSizeDetails}
        Other Details: ${summary.otherDetails}`);
        setMessages((prevMessages) => GiftedChat.append(prevMessages, defaultMessage));
    };

    const handleDefaultResponse = (text) => {
        // Handle other responses or provide a default message
        const defaultMessage = createBotMessage("I'm sorry, I didn't understand that. Please type 'Fire' to initiate the process or 'Exit' to terminate.");
        setMessages((prevMessages) => GiftedChat.append(prevMessages, defaultMessage));
        //Set the conversation step to the correct value based on the current step
        if (text !== 'fire' || text !== 'exit') {
            setConversationStep(0);
            console.log(conversationStep);
            console.log("you are here");
        }
        // switch (conversationStep) {
        //     case 0:
        //         setConversationStep(1);
        //         break;
        //     case 1:
        //         setConversationStep(2);
        //         break;
        //     // Add more cases as needed
        //     case 2:
        //         setConversationStep(3);
        //         break;
        //     // Add more cases as needed
        //     case 3:
        //         setConversationStep(4);
        //         break;
        //     // Add more cases as needed
        //     default:
        //         setConversationStep(2); // Set to the default next step after handling the current step
        // }
    };


    const createBotMessage = (text) => ({
        _id: Math.round(Math.random() * 1000000).toString(),
        text,
        createdAt: new Date(),
        user: { _id: 2, name: 'Firey', avatar: './../assets/img/avatar.png' }, // Set the avatar URL accordingly
    });

    const onSend = (messages = []) => {
        setMessages((prevMessages) => GiftedChat.append(prevMessages, messages));
        handleInput(messages[0].text);
    };


    return (
        <GiftedChat
            messages={messages}
            onSend={(messages) => onSend(messages)}

            messagesContainerStyle={{
                backgroundColor: '#fff',
            }}
            user={{
                _id: 1, // Your user ID
            }}
        />
    );
}



